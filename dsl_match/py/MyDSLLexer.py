# Generated from MyDSLLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,97,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,
        1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,
        9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,5,14,71,
        8,14,10,14,12,14,74,9,14,1,15,1,15,1,15,1,15,4,15,80,8,15,11,15,
        12,15,81,1,15,4,15,85,8,15,11,15,12,15,86,3,15,89,8,15,1,16,4,16,
        92,8,16,11,16,12,16,93,1,16,1,16,0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,1,
        0,5,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,48,57,
        65,70,97,102,1,0,48,57,3,0,9,10,13,13,32,32,101,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,1,35,1,0,0,0,3,41,1,0,0,0,5,43,1,0,0,0,7,45,1,0,0,0,9,48,1,
        0,0,0,11,50,1,0,0,0,13,52,1,0,0,0,15,54,1,0,0,0,17,56,1,0,0,0,19,
        58,1,0,0,0,21,60,1,0,0,0,23,62,1,0,0,0,25,64,1,0,0,0,27,66,1,0,0,
        0,29,68,1,0,0,0,31,88,1,0,0,0,33,91,1,0,0,0,35,36,5,109,0,0,36,37,
        5,97,0,0,37,38,5,116,0,0,38,39,5,99,0,0,39,40,5,104,0,0,40,2,1,0,
        0,0,41,42,5,95,0,0,42,4,1,0,0,0,43,44,5,61,0,0,44,6,1,0,0,0,45,46,
        5,61,0,0,46,47,5,62,0,0,47,8,1,0,0,0,48,49,5,40,0,0,49,10,1,0,0,
        0,50,51,5,41,0,0,51,12,1,0,0,0,52,53,5,123,0,0,53,14,1,0,0,0,54,
        55,5,125,0,0,55,16,1,0,0,0,56,57,5,44,0,0,57,18,1,0,0,0,58,59,5,
        59,0,0,59,20,1,0,0,0,60,61,5,43,0,0,61,22,1,0,0,0,62,63,5,45,0,0,
        63,24,1,0,0,0,64,65,5,42,0,0,65,26,1,0,0,0,66,67,5,47,0,0,67,28,
        1,0,0,0,68,72,7,0,0,0,69,71,7,1,0,0,70,69,1,0,0,0,71,74,1,0,0,0,
        72,70,1,0,0,0,72,73,1,0,0,0,73,30,1,0,0,0,74,72,1,0,0,0,75,76,5,
        48,0,0,76,77,5,120,0,0,77,79,1,0,0,0,78,80,7,2,0,0,79,78,1,0,0,0,
        80,81,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,89,1,0,0,0,83,85,7,
        3,0,0,84,83,1,0,0,0,85,86,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,
        89,1,0,0,0,88,75,1,0,0,0,88,84,1,0,0,0,89,32,1,0,0,0,90,92,7,4,0,
        0,91,90,1,0,0,0,92,93,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,95,
        1,0,0,0,95,96,6,16,0,0,96,34,1,0,0,0,6,0,72,81,86,88,93,1,6,0,0
    ]

class MyDSLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    MATCH = 1
    UNDERSCORE = 2
    EQUAL = 3
    ARROW = 4
    LPAREN = 5
    RPAREN = 6
    LBRACE = 7
    RBRACE = 8
    COMMA = 9
    SEMICOLON = 10
    PLUS = 11
    MINUS = 12
    MUL = 13
    DIV = 14
    ID = 15
    NUMBER = 16
    WS = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'match'", "'_'", "'='", "'=>'", "'('", "')'", "'{'", "'}'", 
            "','", "';'", "'+'", "'-'", "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "MATCH", "UNDERSCORE", "EQUAL", "ARROW", "LPAREN", "RPAREN", 
            "LBRACE", "RBRACE", "COMMA", "SEMICOLON", "PLUS", "MINUS", "MUL", 
            "DIV", "ID", "NUMBER", "WS" ]

    ruleNames = [ "MATCH", "UNDERSCORE", "EQUAL", "ARROW", "LPAREN", "RPAREN", 
                  "LBRACE", "RBRACE", "COMMA", "SEMICOLON", "PLUS", "MINUS", 
                  "MUL", "DIV", "ID", "NUMBER", "WS" ]

    grammarFileName = "MyDSLLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


