# Generated from MyDSLLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,18,118,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,
        1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,5,5,66,8,5,10,5,12,5,69,9,5,1,6,
        4,6,72,8,6,11,6,12,6,73,1,7,1,7,5,7,78,8,7,10,7,12,7,81,9,7,1,7,
        1,7,1,8,4,8,86,8,8,11,8,12,8,87,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,
        11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,117,8,17,0,0,18,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,1,0,8,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,48,57,1,0,34,34,3,0,9,10,13,13,32,32,2,0,42,42,47,
        47,2,0,43,43,45,45,2,0,60,60,62,62,125,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,1,37,1,0,0,0,3,41,1,0,0,0,5,44,1,0,0,0,7,49,1,0,0,0,9,57,
        1,0,0,0,11,63,1,0,0,0,13,71,1,0,0,0,15,75,1,0,0,0,17,85,1,0,0,0,
        19,91,1,0,0,0,21,93,1,0,0,0,23,95,1,0,0,0,25,97,1,0,0,0,27,99,1,
        0,0,0,29,101,1,0,0,0,31,103,1,0,0,0,33,105,1,0,0,0,35,116,1,0,0,
        0,37,38,5,108,0,0,38,39,5,101,0,0,39,40,5,116,0,0,40,2,1,0,0,0,41,
        42,5,105,0,0,42,43,5,102,0,0,43,4,1,0,0,0,44,45,5,101,0,0,45,46,
        5,108,0,0,46,47,5,115,0,0,47,48,5,101,0,0,48,6,1,0,0,0,49,50,5,101,
        0,0,50,51,5,108,0,0,51,52,5,115,0,0,52,53,5,101,0,0,53,54,5,32,0,
        0,54,55,5,105,0,0,55,56,5,102,0,0,56,8,1,0,0,0,57,58,5,112,0,0,58,
        59,5,114,0,0,59,60,5,105,0,0,60,61,5,110,0,0,61,62,5,116,0,0,62,
        10,1,0,0,0,63,67,7,0,0,0,64,66,7,1,0,0,65,64,1,0,0,0,66,69,1,0,0,
        0,67,65,1,0,0,0,67,68,1,0,0,0,68,12,1,0,0,0,69,67,1,0,0,0,70,72,
        7,2,0,0,71,70,1,0,0,0,72,73,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,
        74,14,1,0,0,0,75,79,5,34,0,0,76,78,8,3,0,0,77,76,1,0,0,0,78,81,1,
        0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,82,1,0,0,0,81,79,1,0,0,0,82,
        83,5,34,0,0,83,16,1,0,0,0,84,86,7,4,0,0,85,84,1,0,0,0,86,87,1,0,
        0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,89,1,0,0,0,89,90,6,8,0,0,90,18,
        1,0,0,0,91,92,5,61,0,0,92,20,1,0,0,0,93,94,5,59,0,0,94,22,1,0,0,
        0,95,96,5,40,0,0,96,24,1,0,0,0,97,98,5,41,0,0,98,26,1,0,0,0,99,100,
        5,123,0,0,100,28,1,0,0,0,101,102,5,125,0,0,102,30,1,0,0,0,103,104,
        7,5,0,0,104,32,1,0,0,0,105,106,7,6,0,0,106,34,1,0,0,0,107,117,7,
        7,0,0,108,109,5,61,0,0,109,117,5,61,0,0,110,111,5,33,0,0,111,117,
        5,61,0,0,112,113,5,62,0,0,113,117,5,61,0,0,114,115,5,60,0,0,115,
        117,5,61,0,0,116,107,1,0,0,0,116,108,1,0,0,0,116,110,1,0,0,0,116,
        112,1,0,0,0,116,114,1,0,0,0,117,36,1,0,0,0,6,0,67,73,79,87,116,1,
        6,0,0
    ]

class MyDSLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LET = 1
    IF = 2
    ELSE = 3
    ELSEIF = 4
    PRINT = 5
    ID = 6
    NUMBER = 7
    STRING = 8
    WS = 9
    EQUAL = 10
    SEMICOLON = 11
    LPAREN = 12
    RPAREN = 13
    LBRACE = 14
    RBRACE = 15
    OP1 = 16
    OP2 = 17
    COMPARE = 18

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'let'", "'if'", "'else'", "'else if'", "'print'", "'='", "';'", 
            "'('", "')'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "LET", "IF", "ELSE", "ELSEIF", "PRINT", "ID", "NUMBER", "STRING", 
            "WS", "EQUAL", "SEMICOLON", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
            "OP1", "OP2", "COMPARE" ]

    ruleNames = [ "LET", "IF", "ELSE", "ELSEIF", "PRINT", "ID", "NUMBER", 
                  "STRING", "WS", "EQUAL", "SEMICOLON", "LPAREN", "RPAREN", 
                  "LBRACE", "RBRACE", "OP1", "OP2", "COMPARE" ]

    grammarFileName = "MyDSLLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


